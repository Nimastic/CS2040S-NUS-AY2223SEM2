import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
public class SortingTester {
    public static boolean checkSort(ISort sorter, int size) {
        // TODO: implement this
       // int randomNum;
        Random rng = new Random();
        KeyValuePair[] testArray = new KeyValuePair[size];
        for (int i = 0; i < size; i++) {
           // randomNum = ThreadLocalRandom.current().nextInt(1, size + 1);
            testArray[i] = new KeyValuePair(rng.nextInt(), i);
        }
        sorter.sort(testArray);
        for ( int i = 0; i < size - 1; i++ ) {
            if (testArray[i].getKey() > testArray[i+1].getKey()) {
                return false;
            }
        }
        return true;
    }
    public static boolean isStable(ISort sorter, int size) {
        // TODO: implement this
        //int randomNum;
        Random rng = new Random();
        KeyValuePair[] testArray = new KeyValuePair[size];
        for (int i = 0; i < size; i++) {
            // randomNum = ThreadLocalRandom.current().nextInt(1, (size + 1)/2);
            testArray[i] = new KeyValuePair(rng.nextInt(), i);
        }
        sorter.sort(testArray);
        for (int i = 0; i < size-1; i++) {
            if (testArray[i].getKey() == testArray[i + 1].getKey()) {
                if (testArray[i].getValue() > testArray[i + 1].getValue()) {
                    return false;
                }
            }
        }
        return true;
    }
    public static void main(String[] args) {
        // TODO: implement this
    }
}

/**
 * Simple sorting interface for an object that contains a sorting routine.
 * 
 * @author gilbert
 */
public interface ISort {
    /**
     * Sort an array of KeyValuePair objects by key.
     * 
     * @param array KeyValuePair objects to sort
     * @return integer representing cost of sorting
     */
    public long sort(KeyValuePair[] array);
}

public final class KeyValuePair implements Comparable<KeyValuePair> {
    private int key;
    private int value;
    KeyValuePair(int k, int v) {
        key = k;
        value = v;
    }
    public int getKey() {
        return key;
    }
    public int getValue() {
        return value;
    }
    public int compareTo(KeyValuePair other) {
        if (this.key < other.key) {
            return -1;
        } else if (this.key > other.key) {
            return 1;
        } else {
            return 0;
        }
    }
    public String toString() {
        return "(" + key + ", " + value + ")";
    }
}
